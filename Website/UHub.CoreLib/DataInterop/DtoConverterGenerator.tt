<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="Microsoft.CSharp.dll" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Assembly Name="System.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>  
<#@ import namespace="System.Reflection" #>

<#@ assembly name="bin\Release\UHub.CoreLib.dll" #>
<#@ import namespace="UHub.CoreLib" #>
<#@ import namespace="UHub.CoreLib.Attributes" #>
<#@ import namespace="UHub.CoreLib.Extensions" #>
<#@ import namespace="UHub.CoreLib.DataInterop" #>

//FILE GENERATED BY A TOOL


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

using UHub.CoreLib.Extensions;
using UHub.CoreLib.DataInterop;
using UHub.CoreLib.Attributes;



<# 

	var classSet = System.Reflection.Assembly
	    .GetAssembly(typeof(UHub.CoreLib.Management.CoreFactory)) 
	    .GetTypes()
		.Where(t1 => t1.GetCustomAttributes(typeof(DtoClassAttribute), false).FirstOrDefault() != null)
		.ToList();
#>
<#

    classSet
		.Where(type => type.Namespace != null)
		.Select(type => type.Namespace.ToString())
		.Distinct()
		.ToList()
		.ForEach(nSpace =>
		{
		
			var classSetInner = 
				classSet
				.Where(type1 => type1.Namespace.ToString() == nSpace) 
				.ToList();

			#>namespace <#=nSpace#> 
			{<#


				classSetInner
					.ForEach(iType =>
					{
						var classAttr = iType.GetCustomAttributes(typeof(DtoClassAttribute), false).FirstOrDefault();
						var conversionType = (Type)classAttr.GetType().GetProperty("ConversionType").GetValue(classAttr);
							
						var propSet = 
							iType
							.GetProperties(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.Static|BindingFlags.Default|BindingFlags.GetProperty|BindingFlags.SetProperty)
							.ToList();

						#>
						
						///<summary>
						///AutoGenerated DataConverters for <#=iType.Name#>
						///</summary>
						partial class <#=iType.Name#>
						{

						/// <summary>
						/// Convert <#=conversionType.Name#> to <#=iType.Name#>
						/// </summary>
						/// <param name="arg1">The <#=conversionType.Name#> that will be converted into an <#=iType.Name#></param>
						public static explicit operator <#=iType#>(<#=conversionType#> nativeObj)
						{
                            <#=iType#> dtoObj = new <#=iType#>();
							
						<#
							propSet
							.ForEach(prop => 
							{
                                Write("dtoObj.");
								Write(prop.Name);

                                Write(" = ");
								
                                Write("nativeObj.");
								Write(prop.Name);
                                
                                Write(";" + Environment.NewLine);

								
							});

						#>
						return dtoObj;
						}


                        /// <summary>
						/// Convert <#=iType.Name#> to <#=conversionType.Name#>
						/// </summary>
						/// <param name="arg1">The <#=iType.Name#> that will be converted into an <#=conversionType#></param>
						public static explicit operator <#=conversionType#>(<#=iType#> dtoObj)
						{
                            <#=conversionType#> nativeObj = new <#=conversionType#>();
							
						<#
							propSet
							.ForEach(prop => 
							{
                                Write("nativeObj.");
								Write(prop.Name);

                                Write(" = ");
								
                                Write("dtoObj.");
								Write(prop.Name);
                                
                                Write(";" + Environment.NewLine);

								
							});

						#>
						return nativeObj;
						}}
                        

					<#});



		
			#>}
		 
		<#});

    
	
		
#>