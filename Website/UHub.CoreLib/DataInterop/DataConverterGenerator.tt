<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="Microsoft.CSharp.dll" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Assembly Name="System.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>  
<#@ import namespace="System.Reflection" #>

<#@ assembly name="$(ProjectDir)\bin\Release\UHub.CoreLib.dll" #>
<#@ import namespace="UHub.CoreLib" #>
<#@ import namespace="UHub.CoreLib.Attributes" #>
<#@ import namespace="UHub.CoreLib.Extensions" #>
<#@ import namespace="UHub.CoreLib.DataInterop" #>

//FILE GENERATED BY A TOOL


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

using UHub.CoreLib.Extensions;
using UHub.CoreLib.DataInterop;
using UHub.CoreLib.Attributes;



<# 

	var classSet = System.Reflection.Assembly
	    .GetAssembly(typeof(UHub.CoreLib.Management.CoreFactory)) 
	    .GetTypes()
		.Where(t1 => t1.GetCustomAttributes(typeof(DataClassAttribute), false).FirstOrDefault() != null)
		.ToList();
#>
<#
	var ENABLE_DB_COL_VALIDATION = true;

    classSet
		.Where(type => type.Namespace != null)
		.Select(type => type.Namespace.ToString())
		.Distinct()
		.ToList()
		.ForEach(nSpace =>
		{
		
			var classSetInner = 
				classSet
				.Where(type1 => type1.Namespace.ToString() == nSpace) 
				.ToList();

			#>namespace <#=nSpace#> 
			{<#


				classSetInner
					.ForEach(iType =>
					{
						var classAttr = iType.GetCustomAttributes(typeof(DataClassAttribute), false).FirstOrDefault();
						var enableColValidation_Class = (bool)classAttr.GetType().GetProperty("EnableDBColumnValidation").GetValue(classAttr);
							
						var propSet = 
							iType
							.GetProperties(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.Static|BindingFlags.Default|BindingFlags.GetProperty|BindingFlags.SetProperty)
							.Where(x => x.GetCustomAttributes(typeof(DataPropertyAttribute), false).FirstOrDefault() != null)
							.ToList();

						#>
						
						///<summary>
						///AutoGenerated DataConverters for <#=iType.Name#>
						///</summary>
						partial class <#=iType.Name#>
						{

						/// <summary>
						/// Convert DataRow to <#=iType.Name#>
						/// </summary>
						/// <param name="row">The DataRow that will be converted into an object</param>
						public static explicit operator <#=iType#>(DataRow row)
						{
							var columnSet = row.Table.Columns;
							var obj = new <#=iType.Name#>();
						<#


							propSet
							.ForEach(prop => 
							{
								var propAttr = prop.GetCustomAttributes(typeof(DataPropertyAttribute), false).First();
								string propName_temp = (string)propAttr.GetType().GetProperty("DBNativeName").GetValue(propAttr);
								string dbPropName = propName_temp ?? prop.Name;

								bool? enableColValidation_Prop = (bool?)propAttr.GetType().GetProperty("EnableDBColumnValidation").GetValue(propAttr);
								bool canValidate = ENABLE_DB_COL_VALIDATION && (enableColValidation_Prop ?? enableColValidation_Class);
								
								var propType = prop.PropertyType.ToString();
								if(propType.StartsWith("System.Nullable"))
								{
									propType = Nullable.GetUnderlyingType(prop.PropertyType).ToString() + "?";
								}
								
								
								if(canValidate)
								{
									#>
									if(columnSet.Contains("<#=dbPropName#>"))
									{
									<#
								}
								#>
								obj.<#=prop.Name#> = row.Field<<#=propType#>>("<#=dbPropName#>");
								<#
								if(canValidate)
								{
									Write("}");
								}
								
								
							});

							
						#>
						return obj;
						}
						
						///<summary>
						///Convert SqlDataReader to <#=iType.Name#>
						///</summary>
						/// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
						public static explicit operator <#=iType#>(SqlDataReader reader)
						{
							var columnSet = reader.GetSchemaTable().Columns;
							var obj = new <#=iType.Name#>();
						<#


							propSet
							.ForEach(prop => 
							{
								var propAttr = prop.GetCustomAttributes(typeof(DataPropertyAttribute), false).First();
								string propName_temp = (string)propAttr.GetType().GetProperty("DBNativeName").GetValue(propAttr);
								string dbPropName = propName_temp ?? prop.Name;

								bool? enableColValidation_Prop = (bool?)propAttr.GetType().GetProperty("EnableDBColumnValidation").GetValue(propAttr);
								bool canValidate = ENABLE_DB_COL_VALIDATION && (enableColValidation_Prop ?? enableColValidation_Class);
								bool isNullable = false;

								var propType = prop.PropertyType.ToString();
								if(propType.StartsWith("System.Nullable"))
								{
									isNullable = true;
									propType = Nullable.GetUnderlyingType(prop.PropertyType).ToString();

								}
								
								
								if(canValidate)
								{
									#>
									if(columnSet.Contains("<#=dbPropName#>"))
									{
									<#
								}
								#>

								<#if(isNullable)
								{#>
									if(reader["<#=dbPropName#>"] != DBNull.Value)
									{
										obj.<#=prop.Name#> = (<#=propType#>)reader["<#=dbPropName#>"];
									}
									else
									{
										obj.<#=prop.Name#> = null;
									}<#
								}
								else
								{
									if(propType == "System.String")
									{#>
										obj.<#=prop.Name#> = reader["<#=dbPropName#>"] as <#=propType#>;<#
									}
									else
									{#>
										obj.<#=prop.Name#> = (<#=propType#>)reader["<#=dbPropName#>"];<#
									}
								}
								
								if(canValidate)
								{
									Write("}");
								}
								
								
							});

							
						#>
						return obj;
						}}

					<#});



		
			#>}
		 
		<#});

    
	
		
#>